
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jan 08 18:32:35 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java.io.*;
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.Tab;
import util.ImplementationClassHelper;
import rs.etf.pp1.symboltable.concepts.Obj;
import rs.etf.pp1.symboltable.concepts.Struct;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jan 08 18:32:35 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\002\010\000\002\002\004\000\002\040" +
    "\003\000\002\016\004\000\002\016\002\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\063\002\000" +
    "\002\011\007\000\002\007\005\000\002\007\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\010" +
    "\005\000\002\010\003\000\002\064\002\000\002\005\006" +
    "\000\002\005\004\000\002\003\005\000\002\003\003\000" +
    "\002\004\003\000\002\004\005\000\002\012\011\000\002" +
    "\020\004\000\002\020\002\000\002\034\005\000\002\034" +
    "\002\000\002\065\002\000\002\026\006\000\002\026\004" +
    "\000\002\025\005\000\002\025\003\000\002\024\003\000" +
    "\002\024\005\000\002\027\004\000\002\027\002\000\002" +
    "\066\002\000\002\006\013\000\002\030\004\000\002\030" +
    "\005\000\002\030\004\000\002\030\005\000\002\031\004" +
    "\000\002\031\002\000\002\033\003\000\002\033\002\000" +
    "\002\013\005\000\002\013\003\000\002\014\004\000\002" +
    "\014\006\000\002\022\004\000\002\022\002\000\002\023" +
    "\004\000\002\023\004\000\002\023\007\000\002\023\011" +
    "\000\002\023\013\000\002\023\004\000\002\023\004\000" +
    "\002\023\005\000\002\023\004\000\002\023\007\000\002" +
    "\023\011\000\002\023\007\000\002\023\005\000\002\035" +
    "\003\000\002\035\002\000\002\036\003\000\002\036\002" +
    "\000\002\015\005\000\002\015\003\000\002\045\003\000" +
    "\002\045\004\000\002\046\003\000\002\067\002\000\002" +
    "\046\006\000\002\044\003\000\002\070\002\000\002\044" +
    "\006\000\002\047\003\000\002\047\005\000\002\047\006" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\004\000\002\071\002\000\002\047\010\000\002" +
    "\072\002\000\002\047\006\000\002\043\003\000\002\073" +
    "\002\000\002\041\005\000\002\042\005\000\002\074\002" +
    "\000\002\075\002\000\002\042\010\000\002\042\002\000" +
    "\002\076\002\000\002\032\005\000\002\077\002\000\002" +
    "\037\005\000\002\037\004\000\002\037\005\000\002\037" +
    "\003\000\002\037\003\000\002\100\002\000\002\050\006" +
    "\000\002\050\003\000\002\101\002\000\002\052\006\000" +
    "\002\052\003\000\002\051\005\000\002\051\003\000\002" +
    "\054\003\000\002\054\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\056\003\000\002\056\003\000" +
    "\002\057\003\000\002\057\003\000\002\060\003\000\002" +
    "\060\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\004\005\001\002\000\004\002\351\001" +
    "\002\000\004\051\006\001\002\000\014\003\uffff\005\uffff" +
    "\051\uffff\053\uffff\054\uffff\001\002\000\014\003\ufffd\005" +
    "\ufffd\051\ufffd\053\ufffd\054\ufffd\001\002\000\014\003\017" +
    "\005\012\051\013\053\021\054\022\001\002\000\004\051" +
    "\ufff0\001\002\000\012\006\uffd4\022\uffd4\051\uffd4\062\uffd4" +
    "\001\002\000\064\005\uffa5\007\uffa5\011\uffa5\012\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\044\uffa5\045\uffa5" +
    "\051\uffa5\001\002\000\014\003\ufffb\005\ufffb\051\ufffb\053" +
    "\ufffb\054\ufffb\001\002\000\014\003\ufffa\005\ufffa\051\ufffa" +
    "\053\ufffa\054\ufffa\001\002\000\014\003\ufffe\005\ufffe\051" +
    "\ufffe\053\ufffe\054\ufffe\001\002\000\004\007\335\001\002" +
    "\000\014\003\ufffc\005\ufffc\051\ufffc\053\ufffc\054\ufffc\001" +
    "\002\000\004\051\040\001\002\000\004\051\013\001\002" +
    "\000\004\051\ufff9\001\002\000\004\051\027\001\002\000" +
    "\006\007\ufff6\012\036\001\002\000\004\007\035\001\002" +
    "\000\010\007\ufff1\012\ufff1\015\030\001\002\000\010\046" +
    "\031\047\034\050\033\001\002\000\006\007\ufff5\012\ufff5" +
    "\001\002\000\006\007\ufff2\012\ufff2\001\002\000\006\007" +
    "\ufff4\012\ufff4\001\002\000\006\007\ufff3\012\ufff3\001\002" +
    "\000\014\003\ufff8\005\ufff8\051\ufff8\053\ufff8\054\ufff8\001" +
    "\002\000\004\051\027\001\002\000\004\007\ufff7\001\002" +
    "\000\006\005\uffe7\060\041\001\002\000\004\051\013\001" +
    "\002\000\004\005\043\001\002\000\012\003\uffdc\005\uffdc" +
    "\006\uffdc\051\uffdc\001\002\000\012\003\050\005\046\006" +
    "\uffe5\051\013\001\002\000\012\003\uffdd\005\uffdd\006\uffdd" +
    "\051\uffdd\001\002\000\012\006\uffd4\022\uffd4\051\uffd4\062" +
    "\uffd4\001\002\000\004\051\uffe4\001\002\000\004\007\053" +
    "\001\002\000\004\006\052\001\002\000\014\003\uffe9\005" +
    "\uffe9\051\uffe9\053\uffe9\054\uffe9\001\002\000\012\003\uffe2" +
    "\005\uffe2\006\uffe2\051\uffe2\001\002\000\004\051\057\001" +
    "\002\000\006\007\uffe0\012\063\001\002\000\004\007\062" +
    "\001\002\000\010\007\uffdf\012\uffdf\044\060\001\002\000" +
    "\004\045\061\001\002\000\006\007\uffde\012\uffde\001\002" +
    "\000\012\003\uffe3\005\uffe3\006\uffe3\051\uffe3\001\002\000" +
    "\004\051\057\001\002\000\004\007\uffe1\001\002\000\012" +
    "\006\070\022\073\051\013\062\067\001\002\000\004\051" +
    "\333\001\002\000\006\022\330\051\013\001\002\000\004" +
    "\006\uffe6\001\002\000\012\006\uffd5\022\uffd5\051\uffd5\062" +
    "\uffd5\001\002\000\004\010\075\001\002\000\004\051\074" +
    "\001\002\000\004\010\uffd7\001\002\000\006\011\uffd2\051" +
    "\013\001\002\000\006\011\uffd0\012\325\001\002\000\004" +
    "\011\105\001\002\000\004\011\uffd3\001\002\000\004\051" +
    "\102\001\002\000\010\011\uffcf\012\uffcf\044\103\001\002" +
    "\000\004\045\104\001\002\000\006\011\uffce\012\uffce\001" +
    "\002\000\010\003\uffdc\005\uffdc\051\uffdc\001\002\000\010" +
    "\003\050\005\uffdb\051\013\001\002\000\004\005\110\001" +
    "\002\000\030\003\uffcc\005\uffcc\006\uffcc\013\uffcc\014\uffcc" +
    "\051\uffcc\052\uffcc\056\uffcc\057\uffcc\061\uffcc\063\uffcc\001" +
    "\002\000\030\003\122\005\113\006\126\013\123\014\124" +
    "\051\114\052\127\056\112\057\115\061\125\063\120\001" +
    "\002\000\004\010\321\001\002\000\030\003\uffcc\005\uffcc" +
    "\006\uffcc\013\uffcc\014\uffcc\051\uffcc\052\uffcc\056\uffcc\057" +
    "\uffcc\061\uffcc\063\uffcc\001\002\000\072\007\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\001\002\000\004\010\272\001\002\000\036\010\uff9d\015" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\023\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\001" +
    "\002\000\004\007\253\001\002\000\004\010\224\001\002" +
    "\000\030\003\uffcd\005\uffcd\006\uffcd\013\uffcd\014\uffcd\051" +
    "\uffcd\052\uffcd\056\uffcd\057\uffcd\061\uffcd\063\uffcd\001\002" +
    "\000\004\007\223\001\002\000\004\010\213\001\002\000" +
    "\022\007\141\010\144\017\132\046\140\047\145\050\133" +
    "\051\114\055\136\001\002\000\004\007\131\001\002\000" +
    "\012\006\uffda\022\uffda\051\uffda\062\uffda\001\002\000\004" +
    "\007\130\001\002\000\032\003\uffc6\005\uffc6\006\uffc6\013" +
    "\uffc6\014\uffc6\051\uffc6\052\uffc6\056\uffc6\057\uffc6\061\uffc6" +
    "\063\uffc6\064\uffc6\001\002\000\032\003\uffc5\005\uffc5\006" +
    "\uffc5\013\uffc5\014\uffc5\051\uffc5\052\uffc5\056\uffc5\057\uffc5" +
    "\061\uffc5\063\uffc5\064\uffc5\001\002\000\016\010\144\046" +
    "\140\047\145\050\133\051\114\055\136\001\002\000\056" +
    "\007\uffab\011\uffab\012\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\045\uffab\001\002\000\032\007\uffb8\011\uffb8" +
    "\012\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\045\uffb8\001\002\000\004\007\211" +
    "\001\002\000\004\051\013\001\002\000\060\007\uffb0\010" +
    "\175\011\uffb0\012\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\045\uffb0\001\002\000\056\007\uffad\011\uffad\012" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\023\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\045\uffad" +
    "\001\002\000\032\003\uffc3\005\uffc3\006\uffc3\013\uffc3\014" +
    "\uffc3\051\uffc3\052\uffc3\056\uffc3\057\uffc3\061\uffc3\063\uffc3" +
    "\064\uffc3\001\002\000\042\007\uffb6\011\uffb6\012\uffb6\016" +
    "\165\017\166\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\170\035\164\045\uffb6\001" +
    "\002\000\056\007\uffb3\011\uffb3\012\uffb3\016\uffb3\017\uffb3" +
    "\020\160\021\155\023\152\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\156\037\153\040\154\045\uffb3\001\002\000\020\010" +
    "\144\017\132\046\140\047\145\050\133\051\114\055\136" +
    "\001\002\000\056\007\uffac\011\uffac\012\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\023\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\037\uffac\040\uffac\045\uffac\001\002\000\004" +
    "\011\uffa7\001\002\000\004\011\150\001\002\000\056\007" +
    "\uffa6\011\uffa6\012\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\045\uffa6\001\002\000\020\010\uff8c\017\uff8c\046" +
    "\uff8c\047\uff8c\050\uff8c\051\uff8c\055\uff8c\001\002\000\020" +
    "\010\uff89\017\uff89\046\uff89\047\uff89\050\uff89\051\uff89\055" +
    "\uff89\001\002\000\020\010\uff87\017\uff87\046\uff87\047\uff87" +
    "\050\uff87\051\uff87\055\uff87\001\002\000\020\010\uff86\017" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\055\uff86\001\002" +
    "\000\020\010\uff8a\017\uff8a\046\uff8a\047\uff8a\050\uff8a\051" +
    "\uff8a\055\uff8a\001\002\000\020\010\uff88\017\uff88\046\uff88" +
    "\047\uff88\050\uff88\051\uff88\055\uff88\001\002\000\016\010" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\055\uffb2\001\002" +
    "\000\020\010\uff8b\017\uff8b\046\uff8b\047\uff8b\050\uff8b\051" +
    "\uff8b\055\uff8b\001\002\000\020\010\uff8d\017\uff8d\046\uff8d" +
    "\047\uff8d\050\uff8d\051\uff8d\055\uff8d\001\002\000\016\010" +
    "\144\046\140\047\145\050\133\051\114\055\136\001\002" +
    "\000\042\007\uffb1\011\uffb1\012\uffb1\016\uffb1\017\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\045\uffb1\001\002\000\020\010" +
    "\uff80\017\uff80\046\uff80\047\uff80\050\uff80\051\uff80\055\uff80" +
    "\001\002\000\020\010\uff83\017\uff83\046\uff83\047\uff83\050" +
    "\uff83\051\uff83\055\uff83\001\002\000\020\010\uff82\017\uff82" +
    "\046\uff82\047\uff82\050\uff82\051\uff82\055\uff82\001\002\000" +
    "\020\010\uff84\017\uff84\046\uff84\047\uff84\050\uff84\051\uff84" +
    "\055\uff84\001\002\000\020\010\uff81\017\uff81\046\uff81\047" +
    "\uff81\050\uff81\051\uff81\055\uff81\001\002\000\016\010\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\055\uffb5\001\002\000" +
    "\020\010\uff85\017\uff85\046\uff85\047\uff85\050\uff85\051\uff85" +
    "\055\uff85\001\002\000\016\010\144\046\140\047\145\050" +
    "\133\051\114\055\136\001\002\000\032\007\uffb4\011\uffb4" +
    "\012\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\045\uffb4\001\002\000\022\010\144" +
    "\011\200\017\132\046\140\047\145\050\133\051\114\055" +
    "\136\001\002\000\006\011\uffb9\012\202\001\002\000\004" +
    "\011\201\001\002\000\056\007\uffaf\011\uffaf\012\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\045\uffaf\001\002" +
    "\000\056\007\uffae\011\uffae\012\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036" +
    "\uffae\037\uffae\040\uffae\045\uffae\001\002\000\020\010\144" +
    "\017\132\046\140\047\145\050\133\051\114\055\136\001" +
    "\002\000\004\011\uffba\001\002\000\060\007\uffaa\011\uffaa" +
    "\012\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\044" +
    "\205\045\uffaa\001\002\000\020\010\144\017\132\046\140" +
    "\047\145\050\133\051\114\055\136\001\002\000\004\045" +
    "\uffa9\001\002\000\004\045\210\001\002\000\056\007\uffa8" +
    "\011\uffa8\012\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\045\uffa8\001\002\000\032\003\uffc4\005\uffc4\006\uffc4" +
    "\013\uffc4\014\uffc4\051\uffc4\052\uffc4\056\uffc4\057\uffc4\061" +
    "\uffc4\063\uffc4\064\uffc4\001\002\000\032\007\uffb7\011\uffb7" +
    "\012\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\045\uffb7\001\002\000\020\010\144" +
    "\017\132\046\140\047\145\050\133\051\114\055\136\001" +
    "\002\000\006\011\216\012\215\001\002\000\004\046\220" +
    "\001\002\000\004\007\217\001\002\000\032\003\uffc0\005" +
    "\uffc0\006\uffc0\013\uffc0\014\uffc0\051\uffc0\052\uffc0\056\uffc0" +
    "\057\uffc0\061\uffc0\063\uffc0\064\uffc0\001\002\000\004\011" +
    "\221\001\002\000\004\007\222\001\002\000\032\003\uffc1" +
    "\005\uffc1\006\uffc1\013\uffc1\014\uffc1\051\uffc1\052\uffc1\056" +
    "\uffc1\057\uffc1\061\uffc1\063\uffc1\064\uffc1\001\002\000\032" +
    "\003\uffca\005\uffca\006\uffca\013\uffca\014\uffca\051\uffca\052" +
    "\uffca\056\uffca\057\uffca\061\uffca\063\uffca\064\uffca\001\002" +
    "\000\020\010\144\017\132\046\140\047\145\050\133\051" +
    "\114\055\136\001\002\000\026\007\uff8e\011\uff8e\024\244" +
    "\025\250\026\246\027\247\030\245\031\243\032\uff8e\033" +
    "\uff8e\001\002\000\004\011\237\001\002\000\012\007\uff90" +
    "\011\uff90\032\uff92\033\uff90\001\002\000\010\007\uff93\011" +
    "\uff93\033\uff95\001\002\000\004\033\232\001\002\000\020" +
    "\010\144\017\132\046\140\047\145\050\133\051\114\055" +
    "\136\001\002\000\006\007\uff94\011\uff94\001\002\000\004" +
    "\032\235\001\002\000\020\010\144\017\132\046\140\047" +
    "\145\050\133\051\114\055\136\001\002\000\010\007\uff91" +
    "\011\uff91\033\uff91\001\002\000\026\003\122\005\113\013" +
    "\123\014\124\051\114\052\127\056\112\057\115\061\125" +
    "\063\120\001\002\000\032\003\uffc9\005\uffc9\006\uffc9\013" +
    "\uffc9\014\uffc9\051\uffc9\052\uffc9\056\uffc9\057\uffc9\061\uffc9" +
    "\063\uffc9\064\241\001\002\000\026\003\122\005\113\013" +
    "\123\014\124\051\114\052\127\056\112\057\115\061\125" +
    "\063\120\001\002\000\032\003\uffc8\005\uffc8\006\uffc8\013" +
    "\uffc8\014\uffc8\051\uffc8\052\uffc8\056\uffc8\057\uffc8\061\uffc8" +
    "\063\uffc8\064\uffc8\001\002\000\020\010\uff77\017\uff77\046" +
    "\uff77\047\uff77\050\uff77\051\uff77\055\uff77\001\002\000\020" +
    "\010\uff7a\017\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\055" +
    "\uff7a\001\002\000\020\010\uff78\017\uff78\046\uff78\047\uff78" +
    "\050\uff78\051\uff78\055\uff78\001\002\000\020\010\uff79\017" +
    "\uff79\046\uff79\047\uff79\050\uff79\051\uff79\055\uff79\001\002" +
    "\000\020\010\uff7b\017\uff7b\046\uff7b\047\uff7b\050\uff7b\051" +
    "\uff7b\055\uff7b\001\002\000\020\010\uff7c\017\uff7c\046\uff7c" +
    "\047\uff7c\050\uff7c\051\uff7c\055\uff7c\001\002\000\020\010" +
    "\144\017\132\046\140\047\145\050\133\051\114\055\136" +
    "\001\002\000\012\007\uff8f\011\uff8f\032\uff8f\033\uff8f\001" +
    "\002\000\032\003\uffcb\005\uffcb\006\uffcb\013\uffcb\014\uffcb" +
    "\051\uffcb\052\uffcb\056\uffcb\057\uffcb\061\uffcb\063\uffcb\064" +
    "\uffcb\001\002\000\036\010\260\015\257\016\165\017\166" +
    "\020\160\021\155\023\152\034\170\035\164\036\156\037" +
    "\153\040\154\041\262\042\263\001\002\000\020\010\uff9b" +
    "\017\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\055\uff9b\001" +
    "\002\000\020\010\uff7e\017\uff7e\046\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\055\uff7e\001\002\000\020\010\uff7f\017\uff7f\046" +
    "\uff7f\047\uff7f\050\uff7f\051\uff7f\055\uff7f\001\002\000\022" +
    "\010\144\011\266\017\132\046\140\047\145\050\133\051" +
    "\114\055\136\001\002\000\006\007\uff9c\011\uff9c\001\002" +
    "\000\006\007\uff97\011\uff97\001\002\000\006\007\uff96\011" +
    "\uff96\001\002\000\020\010\uff7d\017\uff7d\046\uff7d\047\uff7d" +
    "\050\uff7d\051\uff7d\055\uff7d\001\002\000\004\011\267\001" +
    "\002\000\006\007\uff99\011\uff99\001\002\000\006\007\uff98" +
    "\011\uff98\001\002\000\020\010\144\017\132\046\140\047" +
    "\145\050\133\051\114\055\136\001\002\000\006\007\uff9a" +
    "\011\uff9a\001\002\000\006\007\uffbd\051\114\001\002\000" +
    "\006\007\uffbe\011\uffbe\001\002\000\004\007\275\001\002" +
    "\000\022\007\uffbb\010\144\017\132\046\140\047\145\050" +
    "\133\051\114\055\136\001\002\000\004\007\300\001\002" +
    "\000\004\007\uffbc\001\002\000\006\011\uffbd\051\114\001" +
    "\002\000\004\011\302\001\002\000\026\003\122\005\113" +
    "\013\123\014\124\051\114\052\127\056\112\057\115\061" +
    "\125\063\120\001\002\000\032\003\uffc7\005\uffc7\006\uffc7" +
    "\013\uffc7\014\uffc7\051\uffc7\052\uffc7\056\uffc7\057\uffc7\061" +
    "\uffc7\063\uffc7\064\uffc7\001\002\000\072\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\307\044\306\045\uff9e" +
    "\001\002\000\066\007\uffa3\010\uffa3\011\uffa3\012\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\023\uffa3\024\uffa3" +
    "\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\045\uffa3\001\002\000\020\010\uffa1\017\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\051\uffa1\055\uffa1\001\002\000\004" +
    "\051\310\001\002\000\072\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\023\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\307\044\306\045\uff9e\001\002\000" +
    "\066\007\uffa2\010\uffa2\011\uffa2\012\uffa2\015\uffa2\016\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\045" +
    "\uffa2\001\002\000\020\010\144\017\132\046\140\047\145" +
    "\050\133\051\114\055\136\001\002\000\004\045\uffa0\001" +
    "\002\000\004\045\315\001\002\000\072\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\307\044\306\045\uff9e" +
    "\001\002\000\066\007\uff9f\010\uff9f\011\uff9f\012\uff9f\015" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\045\uff9f\001\002\000\030\003\122\005\113\006" +
    "\320\013\123\014\124\051\114\052\127\056\112\057\115" +
    "\061\125\063\120\001\002\000\032\003\uffbf\005\uffbf\006" +
    "\uffbf\013\uffbf\014\uffbf\051\uffbf\052\uffbf\056\uffbf\057\uffbf" +
    "\061\uffbf\063\uffbf\064\uffbf\001\002\000\004\051\114\001" +
    "\002\000\004\011\323\001\002\000\004\007\324\001\002" +
    "\000\032\003\uffc2\005\uffc2\006\uffc2\013\uffc2\014\uffc2\051" +
    "\uffc2\052\uffc2\056\uffc2\057\uffc2\061\uffc2\063\uffc2\064\uffc2" +
    "\001\002\000\004\051\013\001\002\000\004\011\uffd1\001" +
    "\002\000\004\051\332\001\002\000\004\051\331\001\002" +
    "\000\004\010\uffd6\001\002\000\004\010\uffd8\001\002\000" +
    "\004\010\uffd9\001\002\000\004\005\uffe8\001\002\000\014" +
    "\003\uffee\005\uffee\051\uffee\053\uffee\054\uffee\001\002\000" +
    "\012\006\337\022\073\051\013\062\067\001\002\000\004" +
    "\002\001\001\002\000\004\051\341\001\002\000\010\007" +
    "\uffeb\012\uffeb\044\347\001\002\000\006\007\uffec\012\345" +
    "\001\002\000\004\007\344\001\002\000\014\003\uffef\005" +
    "\uffef\051\uffef\053\uffef\054\uffef\001\002\000\004\051\341" +
    "\001\002\000\004\007\uffed\001\002\000\004\045\350\001" +
    "\002\000\006\007\uffea\012\uffea\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\040\006\001\001\000\002\001\001\000\004\016\007" +
    "\001\001\000\014\005\013\011\017\012\014\017\015\043" +
    "\010\001\001\000\004\064\337\001\001\000\004\031\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\022\001\001\000\004\063" +
    "\023\001\001\000\006\007\025\010\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\036\010\024\001\001\000\002\001\001\000\004\020\041" +
    "\001\001\000\004\043\333\001\001\000\002\001\001\000" +
    "\004\027\043\001\001\000\010\026\044\034\050\043\046" +
    "\001\001\000\002\001\001\000\004\031\064\001\001\000" +
    "\004\065\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\054\025" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\054\025\063\001\001\000\002\001\001" +
    "\000\010\006\070\030\071\043\065\001\001\000\002\001" +
    "\001\000\004\043\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\077\014\075\033\076\043\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\105\001\001\000\010\026\044\043" +
    "\046\066\106\001\001\000\002\001\001\000\004\022\110" +
    "\001\001\000\010\023\120\032\116\041\115\001\001\000" +
    "\002\001\001\000\004\022\316\001\001\000\004\073\303" +
    "\001\001\000\002\001\001\000\004\076\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\041\136\044\141\045" +
    "\134\046\133\047\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\041\136\044\141\046\211\047\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\056\170\057\171\060\166\001" +
    "\001\000\010\054\156\061\160\062\150\001\001\000\014" +
    "\041\136\044\141\045\145\046\133\047\142\001\001\000" +
    "\002\001\001\000\004\072\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\041\136\044\162\047\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\172\001\001\000\002\001\001\000\012\041\136\044" +
    "\141\046\173\047\142\001\001\000\002\001\001\000\016" +
    "\015\176\041\136\044\141\045\175\046\133\047\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\015\202\041\136\044\141\045" +
    "\175\046\133\047\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\041\136\044\141\045\205\046\133\047" +
    "\142\001\001\000\004\071\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\041\136\044\141\045\213\046\133\047\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\041\136\044\141\045" +
    "\224\046\133\047\142\050\225\051\226\052\227\001\001" +
    "\000\004\053\250\001\001\000\002\001\001\000\004\101" +
    "\233\001\001\000\004\100\230\001\001\000\002\001\001" +
    "\000\022\041\136\044\141\045\224\046\133\047\142\050" +
    "\232\051\226\052\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\041\136\044\141\045\224\046\133\047" +
    "\142\051\226\052\235\001\001\000\002\001\001\000\010" +
    "\023\237\032\116\041\115\001\001\000\002\001\001\000" +
    "\010\023\241\032\116\041\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\041\136\044\141\045\251\046\133\047\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\037\260\054\255" +
    "\055\254\056\263\057\171\060\166\061\160\062\150\001" +
    "\001\000\004\077\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\264\041\136\044\141\045\175\046" +
    "\133\047\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\041\136\044\141" +
    "\045\270\046\133\047\142\001\001\000\002\001\001\000" +
    "\010\032\272\035\273\041\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\036\275\041\136\044\141\045" +
    "\224\046\133\047\142\050\276\051\226\052\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\272\035" +
    "\300\041\115\001\001\000\002\001\001\000\010\023\302" +
    "\032\116\041\115\001\001\000\002\001\001\000\004\042" +
    "\304\001\001\000\002\001\001\000\004\074\311\001\001" +
    "\000\002\001\001\000\004\042\310\001\001\000\002\001" +
    "\001\000\014\041\136\044\141\045\312\046\133\047\142" +
    "\001\001\000\004\075\313\001\001\000\002\001\001\000" +
    "\004\042\315\001\001\000\002\001\001\000\010\023\120" +
    "\032\116\041\115\001\001\000\002\001\001\000\004\041" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\325\014\075\043\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\070\030\071\043\065" +
    "\001\001\000\002\001\001\000\006\003\342\004\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\345\004\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  Tab.init(); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
    int printCallCount = 0;

    Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	ImplementationClassHelper parserHelper = new ImplementationClassHelper();

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Relop ::= LOWER_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.le); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Relop ::= LOWER 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.lt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Relop ::= GREATER_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.ge); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Relop ::= GREATER 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.gt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Relop ::= IS_NOT_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.ne); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Relop ::= IS_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.eq); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Assignop ::= Addop 
            {
              Integer RESULT =null;
		int addleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer add = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Assignop ::= Mulop 
            {
              Integer RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mul = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Assignop ::= EQUAL 
            {
              Integer RESULT =null;
		 RESULT = parserHelper.opoffset; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AddopRight ::= MINUS_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(parserHelper.opoffset + Code.sub); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AddopRight ::= PLUS_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(parserHelper.opoffset + Code.add); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AddopLeft ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AddopLeft ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Addop ::= AddopRight 
            {
              Integer RESULT =null;
		int addRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addRight = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addRight; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;
		int addLeftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addLeftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addLeft = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = addLeft; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MulopRight ::= MOD_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(parserHelper.opoffset + Code.rem); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MulopRight ::= DIV_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(parserHelper.opoffset + Code.div); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MulopRight ::= MUL_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(parserHelper.opoffset + Code.mul); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MulopLeft ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MulopLeft ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MulopLeft ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;
		int mulRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulRight = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = mulRight; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;
		int mulLeftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulLeftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulLeft = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = mulLeft; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CondFact ::= Expr 
            {
              Struct RESULT =null;
		int eNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct eName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = eName; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CondFact ::= Expr Relop Expr 
            {
              Struct RESULT =null;
		int eName1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eName1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct eName1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int rNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int rNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer rName = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int eName2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eName2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct eName2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.executeBoolOperation(eName1,rName,eName2,rNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CondTerm ::= CondFact 
            {
              Struct RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct cName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = cName; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CondTerm ::= CondFact NT$14 AND CondTerm 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct cName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$14 ::= 
            {
              Struct RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct cName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = cName; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Condition ::= CondTerm 
            {
              Struct RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct cName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = cName; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Condition ::= CondTerm NT$13 OR Condition 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct cName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$13 ::= 
            {
              Struct RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct cName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = cName; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DesignatorStatTerm ::= DEC 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.executeDecrement(decleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatTerm",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DesignatorStatTerm ::= INC 
            {
              Object RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.executeIncrement(incleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatTerm",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorStatTerm ::= LPAREN ActualParams RPAREN 
            {
              Object RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object pName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parserHelper.callFunc(pNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatTerm",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DesignatorStatTerm ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parserHelper.callFunc(rleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatTerm",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DesignatorStatTerm ::= Assignop NT$12 Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int aNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int aNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer aName = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct eName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.executeAssignop(eName,aName,eNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatTerm",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$12 ::= 
            {
              Object RESULT =null;
		int aNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int aNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer aName = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.resolveDesignator(aName); parserHelper.inAssign = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DesignatorStat ::= Designator NT$11 DesignatorStatTerm 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int dNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStat",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$11 ::= 
            {
              Object RESULT =null;
		int dNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj dName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.setFirstDesignator(dName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DesignatorTerm ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorTerm",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DesignatorTerm ::= LBRACKET NT$9 Expr NT$10 RBRACKET DesignatorTerm 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int eNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct eName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorTerm",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$10 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct eName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.isIntType(eName, eNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$9 ::= 
            {
              Obj RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = parserHelper.resolveDesignatorArray(lbleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DesignatorTerm ::= DOT IDENT DesignatorTerm 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorTerm",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Designator ::= IDENT NT$8 DesignatorTerm 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int iNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int iNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String iName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int dNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj dName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.resolveIdent(iName,dName,dNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$8 ::= 
            {
              Obj RESULT =null;
		int iNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String iName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.resolveIdent(iName,iNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String tName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.findType(tName,tNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Factor ::= LPAREN Expr NT$7 RPAREN 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct exp = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$7 ::= 
            {
              Struct RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct exp = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = parserHelper.insertExpr(exp,expleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Factor ::= NEW Type LBRACKET Expr NT$6 RBRACKET 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int tTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct tType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int eTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct eType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$6 ::= 
            {
              Struct RESULT =null;
		int tTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct tType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct eType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = parserHelper.insertArray(tType, eType, eTypeleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Factor ::= NEW Type 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Factor ::= BOOL 
            {
              Struct RESULT =null;
		int bNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bName = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.insertBool(bName,bNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Factor ::= CHAR 
            {
              Struct RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character cName = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.insertChar(cName,cNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int nNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer nName = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.insertNumber(nName,nNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Factor ::= Designator LPAREN ActualParams RPAREN 
            {
              Struct RESULT =null;
		int dNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj dName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Factor ::= Designator LPAREN RPAREN 
            {
              Struct RESULT =null;
		int dNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj dName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.pushDesignatorToStack(dName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Term ::= Factor Mulop NT$5 Term 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct fName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int mulleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer mul = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.loadAgain(tName,0); RESULT = parserHelper.executeMulop(fName,mul,tName, fNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$5 ::= 
            {
              Struct RESULT =null;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct fName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mulleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mul = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.loadAgain(fName,mul); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Term ::= Factor 
            {
              Struct RESULT =null;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct fName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = fName; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TermList ::= Term Addop NT$4 TermList 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct tName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int addleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int addright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer add = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tList = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  RESULT = parserHelper.executeAddop(tName,add,tList, tNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$4 ::= 
            {
              Struct RESULT =null;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct tName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int addleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer add = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.loadAgain(tName,add); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TermList ::= Term 
            {
              Struct RESULT =null;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.loadAgain(tName,0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= MINUS TermList 
            {
              Struct RESULT =null;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.resolveType(tName,0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= TermList 
            {
              Struct RESULT =null;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.resolveType(tName,1); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ActualParams ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParams",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ActualParams ::= Expr COMMA ActualParams 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParams",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ForCondition ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForCondition",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ForCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForCondition",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ForDesiStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForDesiStatement",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ForDesiStatement ::= DesignatorStat 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForDesiStatement",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int eNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct eName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.printCallCount++; parserHelper.print(eName,eNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		int eNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int eNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct eName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int lenleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer len = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.printCallCount++; parserHelper.print(eName,len,eNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int dNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parserHelper.read(dName,dNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= RETURN SEMI 
            {
              Object RESULT =null;
		int rTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int rTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object rType = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parserHelper.returnMatched(null,rTypeleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int eTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct eType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parserHelper.returnMatched(eType,eTypeleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= FOR LPAREN ForDesiStatement SEMI ForCondition SEMI ForDesiStatement RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= IF LPAREN Condition RPAREN Statement ELSE Statement 
            {
              Object RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct cName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parserHelper.isBoolType(cName,cNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct cName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parserHelper.isBoolType(cName,cNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= error SEMI 
            {
              Object RESULT =null;
		 parserHelper.report_error("Uspesan oporavak od greske pri dodeli vrednosti promenljivoj"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= DesignatorStat SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormParams ::= Type IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int fTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int fTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct fType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParams",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormParams ::= Type IDENT 
            {
              Object RESULT =null;
		int fTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int fTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct fType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParams",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormParamList ::= FormParams 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormParamList ::= FormParams COMMA FormParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodFormParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodFormParams",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodFormParams ::= FormParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodFormParams",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodRetType ::= STATIC VOID IDENT 
            {
              Object RESULT =null;
		int mNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String mName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertMethod(null,mName,mNameleft);  parserHelper.staticFuncCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodRetType",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodRetType ::= VOID IDENT 
            {
              Object RESULT =null;
		int mNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String mName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertMethod(null,mName,mNameleft);  parserHelper.globalFuncCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodRetType",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodRetType ::= STATIC Type IDENT 
            {
              Object RESULT =null;
		int mTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct mType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String mName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertMethod(mType,mName,mNameleft); parserHelper.staticFuncCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodRetType",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodRetType ::= Type IDENT 
            {
              Object RESULT =null;
		int mTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct mType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String mName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertMethod(mType,mName,mNameleft); parserHelper.globalFuncCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodRetType",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDecl ::= MethodRetType LPAREN MethodFormParams RPAREN LocalVarDeclList NT$3 LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 parserHelper.finalizeMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$3 ::= 
            {
              Object RESULT =null;
 parserHelper.startMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LocalVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LocalVarDeclList ::= LocalVarDeclList LocalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LocalVarPars ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parserHelper.insertLocalArray(vName,vNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LocalVarPars ::= IDENT 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertLocalVar(vName,vNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LocalVarList ::= LocalVarPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LocalVarList ::= LocalVarPars COMMA LocalVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LocalVarDecl ::= error SEMI 
            {
              Object RESULT =null;
		 parserHelper.report_error("Uspesan oporavak od greske pri deklarisanju lokalne promenljive"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LocalVarDecl ::= Type NT$2 LocalVarList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              Object RESULT =null;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.currentType = vType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Extends ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Extends ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassDecl ::= CLASS IDENT Extends LBRACE LocalVarDeclList ClassMethods RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarPars ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parserHelper.insertGlobalArray(vName,vNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarPars",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarPars ::= IDENT 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertGlobalVar(vName,vNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarPars",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarList ::= VarPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarList ::= VarPars COMMA VarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= error SEMI 
            {
              Object RESULT =null;
		 parserHelper.report_error("Uspesan oporavak od greske pri deklarisanju globalne promenljive"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= Type NT$1 VarList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =null;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.currentType = vType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstPars ::= IDENT 
            {
              Object RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertConstVar(cName,cNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstPars ::= IDENT EQUAL ConstType 
            {
              Object RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int cTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object cType = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertConstVar(cName,cType,cNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstType ::= CHAR 
            {
              Object RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character cName = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = cName; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstType ::= BOOL 
            {
              Object RESULT =null;
		int bNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bName = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = bName; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstType ::= NUMBER 
            {
              Object RESULT =null;
		int nNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer nName = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = nName; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstList ::= ConstPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstList ::= ConstPars COMMA ConstList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type NT$0 ConstList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.currentType = vType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgLists ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgLists",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgLists ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgLists",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgLists ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgLists",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgDeclLists ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDeclLists",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgDeclLists ::= ProgDeclLists ProgLists 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDeclLists",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.startProgram(pName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName ProgDeclLists LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj prog = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parserHelper.finalizeProgram(prog); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

