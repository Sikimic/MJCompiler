
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 26 21:06:32 CET 2016
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java.io.*;
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.Tab;
import util.ImplementationClassHelper;
import rs.etf.pp1.symboltable.concepts.Obj;
import rs.etf.pp1.symboltable.concepts.Struct;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 26 21:06:32 CET 2016
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\010\000\002\002\004\000\002\057" +
    "\003\000\002\017\004\000\002\017\002\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\065\002\000" +
    "\002\012\007\000\002\010\005\000\002\010\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\011" +
    "\005\000\002\011\003\000\002\066\002\000\002\006\006" +
    "\000\002\006\004\000\002\004\005\000\002\004\003\000" +
    "\002\005\003\000\002\005\005\000\002\013\011\000\002" +
    "\021\004\000\002\021\002\000\002\037\005\000\002\037" +
    "\002\000\002\067\002\000\002\031\006\000\002\031\004" +
    "\000\002\030\005\000\002\030\003\000\002\027\003\000" +
    "\002\027\005\000\002\032\004\000\002\032\002\000\002" +
    "\070\002\000\002\007\013\000\002\033\004\000\002\033" +
    "\005\000\002\033\004\000\002\033\005\000\002\034\004" +
    "\000\002\034\002\000\002\036\003\000\002\036\002\000" +
    "\002\014\005\000\002\014\003\000\002\015\004\000\002" +
    "\015\006\000\002\025\004\000\002\025\002\000\002\026" +
    "\004\000\002\026\004\000\002\026\007\000\002\026\011" +
    "\000\002\026\013\000\002\026\004\000\002\026\004\000" +
    "\002\026\005\000\002\026\004\000\002\026\007\000\002" +
    "\026\011\000\002\026\007\000\002\026\005\000\002\050" +
    "\003\000\002\050\002\000\002\051\003\000\002\051\002" +
    "\000\002\016\005\000\002\016\003\000\002\063\005\000" +
    "\002\063\004\000\002\052\005\000\002\052\002\000\002" +
    "\062\004\000\002\053\005\000\002\053\002\000\002\064" +
    "\004\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\004\000\002\064\012\000\002\054\005\000" +
    "\002\054\004\000\002\054\002\000\002\061\003\000\002" +
    "\071\002\000\002\060\005\000\002\055\005\000\002\055" +
    "\006\000\002\055\002\000\002\035\004\000\002\056\004" +
    "\000\002\056\004\000\002\056\005\000\002\056\003\000" +
    "\002\056\003\000\002\045\005\000\002\045\003\000\002" +
    "\047\005\000\002\047\003\000\002\046\005\000\002\046" +
    "\003\000\002\042\003\000\002\042\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\003\003\000\002" +
    "\003\003\000\002\040\003\000\002\040\003\000\002\041" +
    "\003\000\002\041\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\004\005\001\002\000\004\002\342\001" +
    "\002\000\004\051\006\001\002\000\014\003\uffff\005\uffff" +
    "\051\uffff\053\uffff\054\uffff\001\002\000\014\003\ufffd\005" +
    "\ufffd\051\ufffd\053\ufffd\054\ufffd\001\002\000\014\003\017" +
    "\005\012\051\013\053\021\054\022\001\002\000\004\051" +
    "\ufff0\001\002\000\012\006\uffd4\022\uffd4\051\uffd4\062\uffd4" +
    "\001\002\000\064\005\uffa8\007\uffa8\011\uffa8\012\uffa8\016" +
    "\uffa8\017\uffa8\020\uffa8\021\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\044\uffa8\045\uffa8" +
    "\051\uffa8\001\002\000\014\003\ufffb\005\ufffb\051\ufffb\053" +
    "\ufffb\054\ufffb\001\002\000\014\003\ufffa\005\ufffa\051\ufffa" +
    "\053\ufffa\054\ufffa\001\002\000\014\003\ufffe\005\ufffe\051" +
    "\ufffe\053\ufffe\054\ufffe\001\002\000\004\007\326\001\002" +
    "\000\014\003\ufffc\005\ufffc\051\ufffc\053\ufffc\054\ufffc\001" +
    "\002\000\004\051\040\001\002\000\004\051\013\001\002" +
    "\000\004\051\ufff9\001\002\000\004\051\027\001\002\000" +
    "\006\007\ufff6\012\036\001\002\000\004\007\035\001\002" +
    "\000\010\007\ufff1\012\ufff1\015\030\001\002\000\010\046" +
    "\033\047\031\050\034\001\002\000\006\007\ufff5\012\ufff5" +
    "\001\002\000\006\007\ufff2\012\ufff2\001\002\000\006\007" +
    "\ufff4\012\ufff4\001\002\000\006\007\ufff3\012\ufff3\001\002" +
    "\000\014\003\ufff8\005\ufff8\051\ufff8\053\ufff8\054\ufff8\001" +
    "\002\000\004\051\027\001\002\000\004\007\ufff7\001\002" +
    "\000\006\005\uffe7\060\041\001\002\000\004\051\013\001" +
    "\002\000\004\005\043\001\002\000\012\003\uffdc\005\uffdc" +
    "\006\uffdc\051\uffdc\001\002\000\012\003\050\005\046\006" +
    "\uffe5\051\013\001\002\000\012\003\uffdd\005\uffdd\006\uffdd" +
    "\051\uffdd\001\002\000\012\006\uffd4\022\uffd4\051\uffd4\062" +
    "\uffd4\001\002\000\004\051\uffe4\001\002\000\004\007\053" +
    "\001\002\000\004\006\052\001\002\000\014\003\uffe9\005" +
    "\uffe9\051\uffe9\053\uffe9\054\uffe9\001\002\000\012\003\uffe2" +
    "\005\uffe2\006\uffe2\051\uffe2\001\002\000\004\051\057\001" +
    "\002\000\006\007\uffe0\012\063\001\002\000\004\007\062" +
    "\001\002\000\010\007\uffdf\012\uffdf\044\060\001\002\000" +
    "\004\045\061\001\002\000\006\007\uffde\012\uffde\001\002" +
    "\000\012\003\uffe3\005\uffe3\006\uffe3\051\uffe3\001\002\000" +
    "\004\051\057\001\002\000\004\007\uffe1\001\002\000\012" +
    "\006\070\022\073\051\013\062\067\001\002\000\004\051" +
    "\324\001\002\000\006\022\321\051\013\001\002\000\004" +
    "\006\uffe6\001\002\000\012\006\uffd5\022\uffd5\051\uffd5\062" +
    "\uffd5\001\002\000\004\010\075\001\002\000\004\051\074" +
    "\001\002\000\004\010\uffd7\001\002\000\006\011\uffd2\051" +
    "\013\001\002\000\006\011\uffd0\012\316\001\002\000\004" +
    "\011\105\001\002\000\004\011\uffd3\001\002\000\004\051" +
    "\102\001\002\000\010\011\uffcf\012\uffcf\044\103\001\002" +
    "\000\004\045\104\001\002\000\006\011\uffce\012\uffce\001" +
    "\002\000\010\003\uffdc\005\uffdc\051\uffdc\001\002\000\010" +
    "\003\050\005\uffdb\051\013\001\002\000\004\005\110\001" +
    "\002\000\030\003\uffcc\005\uffcc\006\uffcc\013\uffcc\014\uffcc" +
    "\051\uffcc\052\uffcc\056\uffcc\057\uffcc\061\uffcc\063\uffcc\001" +
    "\002\000\030\003\122\005\113\006\126\013\123\014\124" +
    "\051\114\052\127\056\112\057\115\061\125\063\120\001" +
    "\002\000\004\010\312\001\002\000\030\003\uffcc\005\uffcc" +
    "\006\uffcc\013\uffcc\014\uffcc\051\uffcc\052\uffcc\056\uffcc\057" +
    "\uffcc\061\uffcc\063\uffcc\001\002\000\072\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\001\002\000\004\010\265\001\002\000\024\010\260\015" +
    "\255\034\164\035\160\036\152\037\147\040\150\041\256" +
    "\042\257\001\002\000\004\007\250\001\002\000\004\010" +
    "\223\001\002\000\030\003\uffcd\005\uffcd\006\uffcd\013\uffcd" +
    "\014\uffcd\051\uffcd\052\uffcd\056\uffcd\057\uffcd\061\uffcd\063" +
    "\uffcd\001\002\000\004\007\222\001\002\000\004\010\212" +
    "\001\002\000\020\007\140\017\132\046\134\047\137\050" +
    "\143\051\114\055\135\001\002\000\004\007\131\001\002" +
    "\000\012\006\uffda\022\uffda\051\uffda\062\uffda\001\002\000" +
    "\004\007\130\001\002\000\032\003\uffc6\005\uffc6\006\uffc6" +
    "\013\uffc6\014\uffc6\051\uffc6\052\uffc6\056\uffc6\057\uffc6\061" +
    "\uffc6\063\uffc6\064\uffc6\001\002\000\032\003\uffc5\005\uffc5" +
    "\006\uffc5\013\uffc5\014\uffc5\051\uffc5\052\uffc5\056\uffc5\057" +
    "\uffc5\061\uffc5\063\uffc5\064\uffc5\001\002\000\014\046\134" +
    "\047\137\050\143\051\114\055\135\001\002\000\004\007" +
    "\207\001\002\000\056\007\uffae\011\uffae\012\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\045\uffae\001\002\000" +
    "\004\051\013\001\002\000\060\007\uffa9\010\171\011\uffa9" +
    "\012\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\045" +
    "\uffa9\001\002\000\056\007\uffb0\011\uffb0\012\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\045\uffb0\001\002\000" +
    "\032\003\uffc3\005\uffc3\006\uffc3\013\uffc3\014\uffc3\051\uffc3" +
    "\052\uffc3\056\uffc3\057\uffc3\061\uffc3\063\uffc3\064\uffc3\001" +
    "\002\000\042\007\uffb5\011\uffb5\012\uffb5\016\uffb5\017\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\045\uffb5\001\002\000\056" +
    "\007\uffb2\011\uffb2\012\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\045\uffb2\001\002\000\056\007\uffaf\011\uffaf" +
    "\012\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\045" +
    "\uffaf\001\002\000\056\007\uffb4\011\uffb4\012\uffb4\016\uffb4" +
    "\017\uffb4\020\155\021\151\023\146\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\152\037\147\040\150\045\uffb4\001\002\000" +
    "\014\046\uff95\047\uff95\050\uff95\051\uff95\055\uff95\001\002" +
    "\000\014\046\uff92\047\uff92\050\uff92\051\uff92\055\uff92\001" +
    "\002\000\016\017\uff90\046\uff90\047\uff90\050\uff90\051\uff90" +
    "\055\uff90\001\002\000\016\017\uff8f\046\uff8f\047\uff8f\050" +
    "\uff8f\051\uff8f\055\uff8f\001\002\000\014\046\uff93\047\uff93" +
    "\050\uff93\051\uff93\055\uff93\001\002\000\016\017\uff91\046" +
    "\uff91\047\uff91\050\uff91\051\uff91\055\uff91\001\002\000\014" +
    "\046\134\047\137\050\143\051\114\055\135\001\002\000" +
    "\014\046\uff96\047\uff96\050\uff96\051\uff96\055\uff96\001\002" +
    "\000\014\046\uff94\047\uff94\050\uff94\051\uff94\055\uff94\001" +
    "\002\000\056\007\uffb3\011\uffb3\012\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\045\uffb3\001\002\000\042\007" +
    "\uffb7\011\uffb7\012\uffb7\016\161\017\162\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\164\035\160\045\uffb7\001\002\000\016\017\uff89\046\uff89" +
    "\047\uff89\050\uff89\051\uff89\055\uff89\001\002\000\014\046" +
    "\uff8c\047\uff8c\050\uff8c\051\uff8c\055\uff8c\001\002\000\014" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\055\uff8b\001\002\000" +
    "\014\046\uff8d\047\uff8d\050\uff8d\051\uff8d\055\uff8d\001\002" +
    "\000\016\017\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\055" +
    "\uff8a\001\002\000\014\046\134\047\137\050\143\051\114" +
    "\055\135\001\002\000\014\046\uff8e\047\uff8e\050\uff8e\051" +
    "\uff8e\055\uff8e\001\002\000\042\007\uffb6\011\uffb6\012\uffb6" +
    "\016\uffb6\017\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\045\uffb6" +
    "\001\002\000\056\007\uffb1\011\uffb1\012\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\045\uffb1\001\002\000\020" +
    "\011\174\017\132\046\134\047\137\050\143\051\114\055" +
    "\135\001\002\000\006\011\uffb9\012\176\001\002\000\004" +
    "\011\175\001\002\000\056\007\uffaa\011\uffaa\012\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\045\uffaa\001\002" +
    "\000\056\007\uffab\011\uffab\012\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\045\uffab\001\002\000\016\017\132" +
    "\046\134\047\137\050\143\051\114\055\135\001\002\000" +
    "\004\011\uffba\001\002\000\060\007\uffad\011\uffad\012\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\044\201\045" +
    "\uffad\001\002\000\016\017\132\046\134\047\137\050\143" +
    "\051\114\055\135\001\002\000\004\045\203\001\002\000" +
    "\004\010\204\001\002\000\016\017\132\046\134\047\137" +
    "\050\143\051\114\055\135\001\002\000\004\011\206\001" +
    "\002\000\056\007\uffac\011\uffac\012\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\045\uffac\001\002\000\032\003" +
    "\uffc4\005\uffc4\006\uffc4\013\uffc4\014\uffc4\051\uffc4\052\uffc4" +
    "\056\uffc4\057\uffc4\061\uffc4\063\uffc4\064\uffc4\001\002\000" +
    "\042\007\uffb5\011\uffb5\012\uffb5\016\uffb5\017\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\045\uffb5\001\002\000\042\007\uffb8" +
    "\011\uffb8\012\uffb8\016\161\017\162\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\164" +
    "\035\160\045\uffb8\001\002\000\016\017\132\046\134\047" +
    "\137\050\143\051\114\055\135\001\002\000\006\011\215" +
    "\012\214\001\002\000\004\047\217\001\002\000\004\007" +
    "\216\001\002\000\032\003\uffc0\005\uffc0\006\uffc0\013\uffc0" +
    "\014\uffc0\051\uffc0\052\uffc0\056\uffc0\057\uffc0\061\uffc0\063" +
    "\uffc0\064\uffc0\001\002\000\004\011\220\001\002\000\004" +
    "\007\221\001\002\000\032\003\uffc1\005\uffc1\006\uffc1\013" +
    "\uffc1\014\uffc1\051\uffc1\052\uffc1\056\uffc1\057\uffc1\061\uffc1" +
    "\063\uffc1\064\uffc1\001\002\000\032\003\uffca\005\uffca\006" +
    "\uffca\013\uffca\014\uffca\051\uffca\052\uffca\056\uffca\057\uffca" +
    "\061\uffca\063\uffca\064\uffca\001\002\000\016\017\132\046" +
    "\134\047\137\050\143\051\114\055\135\001\002\000\026" +
    "\007\uff97\011\uff97\024\242\025\245\026\243\027\244\030" +
    "\241\031\240\032\uff97\033\uff97\001\002\000\004\011\234" +
    "\001\002\000\012\007\uff99\011\uff99\032\232\033\uff99\001" +
    "\002\000\010\007\uff9b\011\uff9b\033\230\001\002\000\016" +
    "\017\132\046\134\047\137\050\143\051\114\055\135\001" +
    "\002\000\006\007\uff9c\011\uff9c\001\002\000\016\017\132" +
    "\046\134\047\137\050\143\051\114\055\135\001\002\000" +
    "\010\007\uff9a\011\uff9a\033\uff9a\001\002\000\026\003\122" +
    "\005\113\013\123\014\124\051\114\052\127\056\112\057" +
    "\115\061\125\063\120\001\002\000\032\003\uffc9\005\uffc9" +
    "\006\uffc9\013\uffc9\014\uffc9\051\uffc9\052\uffc9\056\uffc9\057" +
    "\uffc9\061\uffc9\063\uffc9\064\236\001\002\000\026\003\122" +
    "\005\113\013\123\014\124\051\114\052\127\056\112\057" +
    "\115\061\125\063\120\001\002\000\032\003\uffc8\005\uffc8" +
    "\006\uffc8\013\uffc8\014\uffc8\051\uffc8\052\uffc8\056\uffc8\057" +
    "\uffc8\061\uffc8\063\uffc8\064\uffc8\001\002\000\016\017\uff80" +
    "\046\uff80\047\uff80\050\uff80\051\uff80\055\uff80\001\002\000" +
    "\016\017\uff81\046\uff81\047\uff81\050\uff81\051\uff81\055\uff81" +
    "\001\002\000\016\017\uff83\046\uff83\047\uff83\050\uff83\051" +
    "\uff83\055\uff83\001\002\000\016\017\uff82\046\uff82\047\uff82" +
    "\050\uff82\051\uff82\055\uff82\001\002\000\016\017\uff84\046" +
    "\uff84\047\uff84\050\uff84\051\uff84\055\uff84\001\002\000\016" +
    "\017\uff85\046\uff85\047\uff85\050\uff85\051\uff85\055\uff85\001" +
    "\002\000\016\017\132\046\134\047\137\050\143\051\114" +
    "\055\135\001\002\000\012\007\uff98\011\uff98\032\uff98\033" +
    "\uff98\001\002\000\032\003\uffcb\005\uffcb\006\uffcb\013\uffcb" +
    "\014\uffcb\051\uffcb\052\uffcb\056\uffcb\057\uffcb\061\uffcb\063" +
    "\uffcb\064\uffcb\001\002\000\016\017\uff86\046\uff86\047\uff86" +
    "\050\uff86\051\uff86\055\uff86\001\002\000\006\007\uffa2\011" +
    "\uffa2\001\002\000\016\017\uff87\046\uff87\047\uff87\050\uff87" +
    "\051\uff87\055\uff87\001\002\000\016\017\132\046\134\047" +
    "\137\050\143\051\114\055\135\001\002\000\016\017\uff88" +
    "\046\uff88\047\uff88\050\uff88\051\uff88\055\uff88\001\002\000" +
    "\006\007\uff9e\011\uff9e\001\002\000\006\007\uff9d\011\uff9d" +
    "\001\002\000\020\011\262\017\132\046\134\047\137\050" +
    "\143\051\114\055\135\001\002\000\004\011\263\001\002" +
    "\000\006\007\uffa0\011\uffa0\001\002\000\006\007\uff9f\011" +
    "\uff9f\001\002\000\006\007\uffa1\011\uffa1\001\002\000\006" +
    "\007\uffbd\051\114\001\002\000\006\007\uffbe\011\uffbe\001" +
    "\002\000\004\007\270\001\002\000\020\007\uffbb\017\132" +
    "\046\134\047\137\050\143\051\114\055\135\001\002\000" +
    "\004\007\273\001\002\000\004\007\uffbc\001\002\000\006" +
    "\011\uffbd\051\114\001\002\000\004\011\275\001\002\000" +
    "\026\003\122\005\113\013\123\014\124\051\114\052\127" +
    "\056\112\057\115\061\125\063\120\001\002\000\032\003" +
    "\uffc7\005\uffc7\006\uffc7\013\uffc7\014\uffc7\051\uffc7\052\uffc7" +
    "\056\uffc7\057\uffc7\061\uffc7\063\uffc7\064\uffc7\001\002\000" +
    "\072\007\uffa3\010\uffa3\011\uffa3\012\uffa3\015\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\302\044\301\045\uffa3\001\002\000\066\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\045\uffa6\001\002\000\016" +
    "\017\132\046\134\047\137\050\143\051\114\055\135\001" +
    "\002\000\004\051\303\001\002\000\072\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\302\044\301\045\uffa3" +
    "\001\002\000\066\007\uffa5\010\uffa5\011\uffa5\012\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\045\uffa5\001\002\000\004\045\306\001\002\000" +
    "\072\007\uffa3\010\uffa3\011\uffa3\012\uffa3\015\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\302\044\301\045\uffa3\001\002\000\066\007\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\045\uffa4\001\002\000\030" +
    "\003\122\005\113\006\311\013\123\014\124\051\114\052" +
    "\127\056\112\057\115\061\125\063\120\001\002\000\032" +
    "\003\uffbf\005\uffbf\006\uffbf\013\uffbf\014\uffbf\051\uffbf\052" +
    "\uffbf\056\uffbf\057\uffbf\061\uffbf\063\uffbf\064\uffbf\001\002" +
    "\000\004\051\114\001\002\000\004\011\314\001\002\000" +
    "\004\007\315\001\002\000\032\003\uffc2\005\uffc2\006\uffc2" +
    "\013\uffc2\014\uffc2\051\uffc2\052\uffc2\056\uffc2\057\uffc2\061" +
    "\uffc2\063\uffc2\064\uffc2\001\002\000\004\051\013\001\002" +
    "\000\004\011\uffd1\001\002\000\004\051\323\001\002\000" +
    "\004\051\322\001\002\000\004\010\uffd6\001\002\000\004" +
    "\010\uffd8\001\002\000\004\010\uffd9\001\002\000\004\005" +
    "\uffe8\001\002\000\014\003\uffee\005\uffee\051\uffee\053\uffee" +
    "\054\uffee\001\002\000\012\006\330\022\073\051\013\062" +
    "\067\001\002\000\004\002\001\001\002\000\004\051\332" +
    "\001\002\000\010\007\uffeb\012\uffeb\044\340\001\002\000" +
    "\006\007\uffec\012\336\001\002\000\004\007\335\001\002" +
    "\000\014\003\uffef\005\uffef\051\uffef\053\uffef\054\uffef\001" +
    "\002\000\004\051\332\001\002\000\004\007\uffed\001\002" +
    "\000\004\045\341\001\002\000\006\007\uffea\012\uffea\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\057\006\001\001\000\002\001\001\000\004\017\007" +
    "\001\001\000\014\006\013\012\017\013\014\020\015\061" +
    "\010\001\001\000\004\066\330\001\001\000\004\034\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\022\001\001\000\004\065" +
    "\023\001\001\000\006\010\025\011\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\036\011\024\001\001\000\002\001\001\000\004\021\041" +
    "\001\001\000\004\061\324\001\001\000\002\001\001\000" +
    "\004\032\043\001\001\000\010\031\044\037\050\061\046" +
    "\001\001\000\002\001\001\000\004\034\064\001\001\000" +
    "\004\067\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\054\030" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\054\030\063\001\001\000\002\001\001" +
    "\000\010\007\070\033\071\061\065\001\001\000\002\001" +
    "\001\000\004\061\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\077\015\075\036\076\061\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\105\001\001\000\010\031\044\061" +
    "\046\070\106\001\001\000\002\001\001\000\004\025\110" +
    "\001\001\000\010\026\120\035\116\060\115\001\001\000" +
    "\002\001\001\000\004\025\307\001\001\000\004\071\276" +
    "\001\001\000\002\001\001\000\012\022\253\041\252\044" +
    "\250\056\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\060\135\062\140\063\132\064\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\060\135\062\207\064\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\177\001\001\000\004\054\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\156\001\001\000\004\053" +
    "\143\001\001\000\002\001\001\000\010\042\152\043\153" +
    "\044\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\060\135\064\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\164" +
    "\040\165\041\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\060\135\062\166\064\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\172" +
    "\060\135\062\140\063\171\064\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\176\060\135\062\140\063\171\064\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\060\135" +
    "\062\140\063\201\064\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\060\135\062\140\063\204\064\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\210\001\001\000\010\003\164\040\165" +
    "\041\162\001\001\000\012\060\135\062\140\063\212\064" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\045\224" +
    "\046\225\047\226\060\135\062\140\063\223\064\141\001" +
    "\001\000\004\023\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\045\230\046\225\047" +
    "\226\060\135\062\140\063\223\064\141\001\001\000\002" +
    "\001\001\000\016\046\225\047\232\060\135\062\140\063" +
    "\223\064\141\001\001\000\002\001\001\000\010\026\234" +
    "\035\116\060\115\001\001\000\002\001\001\000\010\026" +
    "\236\035\116\060\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\060\135" +
    "\062\140\063\246\064\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\060\135\062\140\063\263\064\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\260\060\135\062\140\063\171\064\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\035\265\050\266\060\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\045\271" +
    "\046\225\047\226\051\270\060\135\062\140\063\223\064" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\035\265\050\273\060\115\001\001\000\002\001\001\000" +
    "\010\026\275\035\116\060\115\001\001\000\002\001\001" +
    "\000\004\055\277\001\001\000\002\001\001\000\012\060" +
    "\135\062\140\063\304\064\141\001\001\000\002\001\001" +
    "\000\004\055\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\306\001\001\000\002\001\001\000\010" +
    "\026\120\035\116\060\115\001\001\000\002\001\001\000" +
    "\004\060\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\316\015\075\061\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\070\033\071" +
    "\061\065\001\001\000\002\001\001\000\006\004\333\005" +
    "\332\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\336\005\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  Tab.init(); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
    int printCallCount = 0;

    Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	ImplementationClassHelper parserHelper = new ImplementationClassHelper();

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= LOWER_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.le); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= LOWER 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.lt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.ge); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= GREATER 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.gt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= IS_NOT_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.ne); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= IS_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.eq); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Assignop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Assignop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Assignop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AddopRight ::= MINUS_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // AddopRight ::= PLUS_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Addop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Addop ::= AddopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // MulopRight ::= MOD_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MulopRight ::= DIV_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MulopRight ::= MUL_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MulopLeft ::= MOD 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // MulopLeft ::= DIV 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MulopLeft ::= MUL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Mulop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Mulop ::= MulopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CondTerm ::= CondFact AND CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Condition ::= CondTerm OR Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DesignatorStatTerm ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatTerm",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DesignatorStatTerm ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatTerm",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DesignatorStatTerm ::= LPAREN ActualParams RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatTerm",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DesignatorStatTerm ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatTerm",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DesignatorStatTerm ::= Assignop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatTerm",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DesignatorStat ::= Designator DesignatorStatTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStat",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DesignatorTerm ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorTerm",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DesignatorTerm ::= LBRACKET Expr RBRACKET DesignatorTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorTerm",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DesignatorTerm ::= DOT IDENT DesignatorTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorTerm",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Designator ::= IDENT NT$4 DesignatorTerm 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int dNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String dName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$4 ::= 
            {
              Obj RESULT =null;
		int dNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String dName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = parserHelper.resolveIdent(dName,dNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int tNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String tName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.findType(tName,tNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FactorActParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorActParams",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FactorActParams ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorActParams",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FactorActParams ::= LPAREN ActualParams RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorActParams",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Factor ::= NEW Type LBRACKET Expr RBRACKET LPAREN Expr RPAREN 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Factor ::= NEW Type 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Factor ::= BOOL 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Factor ::= CHAR 
            {
              Struct RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character cName = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.insertChar(cName,cNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int nNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer nName = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.insertNumber(nName,nNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Factor ::= Designator FactorActParams 
            {
              Struct RESULT =null;
		int dNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = dName.getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MulopFactorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MulopFactorList ::= MulopFactorList Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Term ::= Factor MulopFactorList 
            {
              Struct RESULT =null;
		int fTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int fTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct fType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = fType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AddopTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AddopTermList ::= AddopTermList Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Term AddopTermList 
            {
              Struct RESULT =null;
		int tTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct tType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = tType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= MINUS Term AddopTermList 
            {
              Struct RESULT =null;
		int tTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct tType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ActualParams ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParams",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ActualParams ::= Expr COMMA ActualParams 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParams",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ForCondition ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForCondition",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ForCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForCondition",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ForDesiStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForDesiStatement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ForDesiStatement ::= DesignatorStat 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForDesiStatement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int eNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct eName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.printCallCount++; parserHelper.print(eName,eNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		int eNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int eNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct eName = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.printCallCount++; parserHelper.print(eName,eNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= RETURN SEMI 
            {
              Object RESULT =null;
		int rTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int rTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object rType = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parserHelper.returnMatched(null,rTypeleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int eTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct eType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parserHelper.returnMatched(eType,eTypeleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= FOR LPAREN ForDesiStatement SEMI ForCondition SEMI ForDesiStatement RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= IF LPAREN Condition RPAREN Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= error SEMI 
            {
              Object RESULT =null;
		 parserHelper.report_error("Uspesan oporavak od greske pri dodeli vrednosti promenljivoj"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= DesignatorStat SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormParams ::= Type IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int fTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int fTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct fType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParams",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormParams ::= Type IDENT 
            {
              Object RESULT =null;
		int fTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int fTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct fType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParams",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormParamList ::= FormParams 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormParamList ::= FormParams COMMA FormParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodFormParams ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodFormParams",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodFormParams ::= FormParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodFormParams",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodRetType ::= STATIC VOID IDENT 
            {
              Object RESULT =null;
		int mNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String mName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertMethod(null,mName,mNameleft);  parserHelper.staticFuncCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodRetType",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodRetType ::= VOID IDENT 
            {
              Object RESULT =null;
		int mNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String mName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertMethod(null,mName,mNameleft);  parserHelper.globalFuncCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodRetType",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodRetType ::= STATIC Type IDENT 
            {
              Object RESULT =null;
		int mTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct mType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String mName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertMethod(mType,mName,mNameleft); parserHelper.staticFuncCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodRetType",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodRetType ::= Type IDENT 
            {
              Object RESULT =null;
		int mTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct mType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String mName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertMethod(mType,mName,mNameleft); parserHelper.globalFuncCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodRetType",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDecl ::= MethodRetType LPAREN MethodFormParams RPAREN LocalVarDeclList NT$3 LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 parserHelper.finalizeMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$3 ::= 
            {
              Object RESULT =null;
 parserHelper.startMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LocalVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LocalVarDeclList ::= LocalVarDeclList LocalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LocalVarPars ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parserHelper.insertLocalArray(vName,vNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LocalVarPars ::= IDENT 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertLocalVar(vName,vNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LocalVarList ::= LocalVarPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LocalVarList ::= LocalVarPars COMMA LocalVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LocalVarDecl ::= error SEMI 
            {
              Object RESULT =null;
		 parserHelper.report_error("Uspesan oporavak od greske pri deklarisanju lokalne promenljive"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LocalVarDecl ::= Type NT$2 LocalVarList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              Object RESULT =null;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.currentType = vType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Extends ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Extends ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassDecl ::= CLASS IDENT Extends LBRACE LocalVarDeclList ClassMethods RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarPars ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parserHelper.insertGlobalArray(vName,vNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarPars",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarPars ::= IDENT 
            {
              Object RESULT =null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertGlobalVar(vName,vNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarPars",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarList ::= VarPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarList ::= VarPars COMMA VarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= error SEMI 
            {
              Object RESULT =null;
		 parserHelper.report_error("Uspesan oporavak od greske pri deklarisanju globalne promenljive"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= Type NT$1 VarList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =null;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.currentType = vType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstPars ::= IDENT 
            {
              Object RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parserHelper.insertConstVar(cName,cNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstPars ::= IDENT EQUAL ConstType 
            {
              Object RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parserHelper.insertConstVar(cName,cNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstType ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstType ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstType ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstList ::= ConstPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstList ::= ConstPars COMMA ConstList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type NT$0 ConstList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct vType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parserHelper.currentType = vType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgLists ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgLists",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgLists ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgLists",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgLists ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgLists",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgDeclLists ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDeclLists",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgDeclLists ::= ProgDeclLists ProgLists 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDeclLists",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parserHelper.startProgram(pName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName ProgDeclLists LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj prog = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parserHelper.finalizeProgram(prog); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

